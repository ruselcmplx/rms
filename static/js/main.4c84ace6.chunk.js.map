{"version":3,"sources":["Video.js","Menu.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Video","react_default","a","createElement","className","autoPlay","muted","playsInline","loop","id","src","type","href","Component","Menu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","opened","setState","isOpened","menuClass","itemsClass","ref","onClick","handleClickMenu","bind","width","height","viewBox","fill","y","Content","App","alt","src_Menu_0","src_Content_0","src_Video_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAiBeA,0LAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOE,UAAQ,EAACC,OAAK,EAACC,aAAW,EAACC,MAAI,EAACC,GAAG,OACxCR,EAAAC,EAAAC,cAAA,UAAQO,IAAI,kBAAkBC,KAAK,cACnCV,EAAAC,EAAAC,cAAA,gEACIF,EAAAC,EAAAC,cAAA,KAAGS,KAAK,mBAAR,qBADJ,sBANUC,cC2CLC,qBA1CZ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACVC,QAAQ,GAHKR,iFAQhBG,KAAKM,SAAS,CACXD,QAASL,KAAKI,MAAMC,0CAKvB,IAAME,EAAWP,KAAKI,MAAMC,OAAS,UAAY,UAC3CG,EAAY,YAAcD,EAC1BE,EAAa,sBAAwBF,EAC3C,OACGzB,EAAAC,EAAAC,cAAA,OAAKC,UAAWuB,EAAWE,IAAI,QAC5B5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAa0B,QAASX,KAAKY,gBAAgBC,KAAKb,OAC5DlB,EAAAC,EAAAC,cAAA,OAAK8B,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,QAClDnC,EAAAC,EAAAC,cAAA,QAAMkC,EAAE,KAAKJ,MAAM,KAAKC,OAAO,KAAKE,KAAK,UACzCnC,EAAAC,EAAAC,cAAA,QAAM8B,MAAM,KAAKC,OAAO,KAAKE,KAAK,YAGxCnC,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,GACb3B,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,yCAGNF,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAa,aAC1B3B,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,yCApCIU,cCiBJyB,0LAfT,OACGrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZH,EAAAC,EAAAC,cAAA,6jCACAF,EAAAC,EAAAC,cAAA,05BACAF,EAAAC,EAAAC,cAAA,olBACAF,EAAAC,EAAAC,cAAA,8kCACAF,EAAAC,EAAAC,cAAA,u9CAEHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,wBAXUS,cCkBP0B,0LAbT,OACGtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKqC,IAAI,GAAG9B,IAAI,qBAEnBT,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,cATM9B,cCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4c84ace6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Video.css';\r\n\r\nclass Video extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Video\">\r\n        <video autoPlay muted playsInline loop id=\"rms\">\r\n          <source src=\"./video/RMS.mp4\" type=\"video/mp4\"/>\r\n          <p>Your browser doesn't support HTML5 video. Here is\r\n            a <a href=\"./video/RMS.mp4\">link to the video</a> instead.</p>\r\n        </video>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Video;\r\n","import React, { Component } from 'react';\r\nimport './Menu.css';\r\n\r\nclass Menu extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         opened: false\r\n      }\r\n   }\r\n\r\n   handleClickMenu() {\r\n      this.setState({\r\n         opened: !this.state.opened\r\n      });\r\n   }\r\n\r\n   render() {\r\n      const isOpened = this.state.opened ? '_opened' : '_closed';\r\n      const menuClass = 'Menu Menu' + isOpened;\r\n      const itemsClass = 'MenuItems MenuItems' + isOpened;\r\n      return (\r\n         <div className={menuClass} ref=\"menu\">\r\n            <div className=\"MenuButton\" onClick={this.handleClickMenu.bind(this)}>\r\n               <svg width=\"40\" height=\"30\" viewBox=\"0 0 40 30\" fill=\"none\">\r\n                  <rect y=\"20\" width=\"40\" height=\"10\" fill=\"white\"/>\r\n                  <rect width=\"40\" height=\"10\" fill=\"white\"/>\r\n               </svg>\r\n            </div>\r\n            <div className={itemsClass}>\r\n               <ul>\r\n                  <li>Аренда</li>\r\n                  <li>Услуги</li>\r\n                  <li>Проекты</li>\r\n                  <li>О нас</li>\r\n               </ul>\r\n            </div>\r\n            <div className={itemsClass + ' MenuInfo'}>\r\n               <span>hello@rms.group</span>\r\n               <span>+7 987 231-77-46</span>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport './Content.css';\r\n\r\nclass Content extends Component {\r\n   render() {\r\n      return (\r\n         <div className=\"Content\">\r\n            <div className=\"Text\">\r\n               <p>Rent Media Systems осуществляет профессиональную видеосъемку и трансляции мероприятий: в том числе многокамерную съемку и нелинейный монтаж прямой трансляции, онлайн-трансляции, трансляции на экраны и видео-стены.</p>\r\n               <p>Наши специалисты имеют опыт работы на федеральных телеканалах и проводили съемки телепередач, музыкальных концертов, спортивных соревнований и корпоративных мероприятий.</p>\r\n               <p>По окончании мы предоставляем полноценный видео-отчет с мероприятия, снятый профессиональными операторами.</p>\r\n               <p>Стилистика и хронометраж итогового ролика будут соответствовать Вашим пожеланиям. Трансляции могут быть использованы в обучении, политических кампаниях, рекламе, корпоративном общении, сфере развлечений.</p>\r\n               <p>Качество изображения и звука онлайн- трансляции сопоставимо с телевизионной трансляцией, достигается с помощью наложения, титров, рекламных роликов и специально созданной графики в прямом эфире, современного телевизионного оборудования и системы доставки тяжелого контента CDN.</p>\r\n            </div>\r\n            <div className=\"Media\">            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from 'react';\nimport Video from './Video';\nimport Menu from './Menu';\nimport Content from './Content';\nimport './App.css';\n\nclass App extends Component {\n   render() {\n      return (\n         <div className=\"App\">\n            <div className=\"Logo\">\n               <img alt=\"\" src=\"./img/Group.svg\" />\n            </div>\n            <Menu />\n            <Content />\n            <Video />\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}